
services:
  # CLI/Backend service for data transfers
  snowpark-cli:
    build: 
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: snowpark-cli
    volumes:
      - ./.env:/app/.env
      - ./logs:/app/logs
      - ./data:/app/data
      - ./config:/app/config
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      # Database configuration from environment
      - DB_TYPE=${DB_TYPE:-sqlserver}
      - SOURCE_HOST=${SOURCE_HOST}
      - SOURCE_DATABASE=${SOURCE_DATABASE}  
      - SOURCE_USERNAME=${SOURCE_USERNAME}
      - SOURCE_PASSWORD=${SOURCE_PASSWORD}
      - SNOWFLAKE_ACCOUNT=${SNOWFLAKE_ACCOUNT}
      - SNOWFLAKE_USER=${SNOWFLAKE_USER}
      - SNOWFLAKE_PASSWORD=${SNOWFLAKE_PASSWORD}
      - SNOWFLAKE_WAREHOUSE=${SNOWFLAKE_WAREHOUSE}
      - SNOWFLAKE_DATABASE=${SNOWFLAKE_DATABASE}
      - SNOWFLAKE_ROLE=${SNOWFLAKE_ROLE}
      # Transfer configuration
      - SOURCE_TABLE=${SOURCE_TABLE}
      - TARGET_TABLE=${TARGET_TABLE}
      - BATCH_SIZE=${BATCH_SIZE:-10000}
      - PARTITION_COLUMN=${PARTITION_COLUMN}
      - LOWER_BOUND=${LOWER_BOUND}
      - UPPER_BOUND=${UPPER_BOUND} 
      - NUM_PARTITIONS=${NUM_PARTITIONS}
    command: ["python", "-m", "snowpark_db_api.cli", "--help"]
    profiles:
      - cli

  # Jupyter Lab service for interactive development  
  snowpark-jupyter:
    build: 
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: snowpark-jupyter
    ports:
      - "8888:8888"  # Jupyter Lab
      - "8080:8080"  # Alternative port
    volumes:
      - ./.env:/app/.env
      - ./logs:/app/logs
      - ./data:/app/data
      - ./config:/app/config
      - ./nbs:/app/nbs  # Mount notebooks for live editing
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      # Same environment variables as CLI
      - DB_TYPE=${DB_TYPE:-sqlserver}
      - SOURCE_HOST=${SOURCE_HOST}
      - SOURCE_DATABASE=${SOURCE_DATABASE}
      - SOURCE_USERNAME=${SOURCE_USERNAME}
      - SOURCE_PASSWORD=${SOURCE_PASSWORD}
      - SNOWFLAKE_ACCOUNT=${SNOWFLAKE_ACCOUNT}
      - SNOWFLAKE_USER=${SNOWFLAKE_USER}
      - SNOWFLAKE_PASSWORD=${SNOWFLAKE_PASSWORD}
      - SNOWFLAKE_WAREHOUSE=${SNOWFLAKE_WAREHOUSE}
      - SNOWFLAKE_DATABASE=${SNOWFLAKE_DATABASE}
      - SNOWFLAKE_ROLE=${SNOWFLAKE_ROLE}
      - SOURCE_TABLE=${SOURCE_TABLE}
      - TARGET_TABLE=${TARGET_TABLE}
      - BATCH_SIZE=${BATCH_SIZE:-10000}
      - PARTITION_COLUMN=${PARTITION_COLUMN}
      - LOWER_BOUND=${LOWER_BOUND}
      - UPPER_BOUND=${UPPER_BOUND}
      - NUM_PARTITIONS=${NUM_PARTITIONS}
    command: ["jupyter", "lab", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root", "--notebook-dir=/app/nbs", "--NotebookApp.token=''", "--NotebookApp.password=''"]
    profiles:
      - jupyter
      - dev

  # Combined service (default) - starts with Jupyter but CLI available
  snowpark-combined:
    build: 
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: snowpark-combined
    ports:
      - "8888:8888"
      - "8080:8080"
    volumes:
      - ./.env:/app/.env
      - ./logs:/app/logs
      - ./data:/app/data  
      - ./config:/app/config
      - ./nbs:/app/nbs
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - DB_TYPE=${DB_TYPE:-sqlserver}
      - SOURCE_HOST=${SOURCE_HOST}
      - SOURCE_DATABASE=${SOURCE_DATABASE}
      - SOURCE_USERNAME=${SOURCE_USERNAME}
      - SOURCE_PASSWORD=${SOURCE_PASSWORD}
      - SNOWFLAKE_ACCOUNT=${SNOWFLAKE_ACCOUNT}
      - SNOWFLAKE_USER=${SNOWFLAKE_USER}
      - SNOWFLAKE_PASSWORD=${SNOWFLAKE_PASSWORD}
      - SNOWFLAKE_WAREHOUSE=${SNOWFLAKE_WAREHOUSE}
      - SNOWFLAKE_DATABASE=${SNOWFLAKE_DATABASE}
      - SNOWFLAKE_ROLE=${SNOWFLAKE_ROLE}
      - SOURCE_TABLE=${SOURCE_TABLE}
      - TARGET_TABLE=${TARGET_TABLE}
      - BATCH_SIZE=${BATCH_SIZE:-10000}
      - PARTITION_COLUMN=${PARTITION_COLUMN}
      - LOWER_BOUND=${LOWER_BOUND}
      - UPPER_BOUND=${UPPER_BOUND}
      - NUM_PARTITIONS=${NUM_PARTITIONS}
    # Default starts Jupyter, but you can exec into container for CLI
    profiles:
      - default

  # Optional: Add a sidecar container for monitoring/logging
  logs-viewer:
    image: alpine:latest
    container_name: snowpark-logs
    volumes:
      - ./logs:/logs:ro
    command: tail -f /logs/transfer.log
    depends_on:
      - snowpark-cli
    networks:
      - snowpark-network
    profiles:
      - monitoring

networks:
  snowpark-network:
    driver: bridge

volumes:
  logs:
    driver: local
  config:
    driver: local
  data:
    driver: local 